// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String?  // Hashed password 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
  routines  Routine[]
  moods     Mood[]
  journals  Journal[]
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean   @default(false)
  priority    Priority  @default(MEDIUM)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  routineId   String?
  routine     Routine?  @relation(fields: [routineId], references: [id])
}

model Routine {
  id          String   @id @default(uuid())
  title       String
  description String?
  time        DateTime?
  isActive    Boolean  @default(true)
  frequency   String   @default("daily") // daily, weekdays, weekends, weekly, monthly
  days        String?  // JSON string of weekdays: "[0,1,4]" for Sunday, Monday, Thursday
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

model Category {
  id        String   @id @default(uuid())
  name      String
  color     String   @default("#6366F1") // Default indigo color
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
}

model Mood {
  id        String   @id @default(uuid())
  value     Int      // 1-5 scale
  note      String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Journal {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
